cp ../../4sliceproteins/*extractedseq.fa ./
cp ../0venom_capture_success/*venombed ./
cp ../../5makenewref/*.py ./


######################### to not overcount for conotoxin genomic architecture statistics, merged all transcripts that were greater than 98% similar

python cdhit_wrapper.py --map mapfile

creates:

1. *extractedseq_merged.fa

#######################

at *merged.fa > all_extractedseq_merged.fa

################### get a bedfile with how the conotoxin regions are split up along each conotoxin sequence (extract coordinates)
got conotoxins_predicted.txt from /nfs/LabShared/MarkPhuong/final/analyses/process_Summary_stats/1checkcysteienes


python define_functional_exon_units.py

uses conotoxins_predicted.txt and made a bed file to denote regions for when they are signal, pre, mature, or post

requires: 

1. conotoroxins_predicted.txt
2. all_extractedseq_renamed.fa

creates:

1. conotoxins_functional_regions.bed

will print out some stuff -- just checking to see if my bed boundaries match the region of the nucleotide sequence of the conotoxin and that it translates correctly

############################# get table of how different regions (mature, signal, etc.) are distributed across exons

cp ../0venom_capture_success/all_stats_venombed_annotated_v3 ./

python count_num_exons.py

A {2: 75, 3: 3}
B1 {1: 33, 2: 1}
B2 {4: 1}
B4 {1: 29}
C {3: 6}
D {3: 16}
DivMKFPLLFISL {4: 2}
DivMKLCVVIVLL {4: 6}
DivMKLLLTLLLG {6: 3}
DivMKVAVVLLVS {3: 6}
DivMRFLHFLIVA {3: 1, 4: 1}
DivMRFYIGLMAA {5: 4}
DivMSKLVILAVL {3: 6}
DivMTAKATLLVL {3: 1}
DivMTLTFLLVVA {3: 2}
E {3: 25}
F {2: 3, 3: 15}
H {3: 7}
I1 {3: 48}
I2 {2: 1, 3: 40, 4: 2, 5: 1}
I3 {3: 28}
I4 {3: 18, 4: 4}
J {1: 24, 2: 3, 3: 2}
K {3: 5}
L {2: 1, 3: 19, 4: 7, 5: 2}
M {3: 198, 4: 6}
MEFRR {4: 13}
MEVKM {2: 1}
MKFLL {4: 11, 5: 1}
MMLFM {3: 1, 4: 18, 5: 7}
MNCYL {3: 1, 4: 6}
MTFYL {4: 2}
N {3: 24, 4: 4}
O1 {2: 1, 3: 370, 4: 8}
O2 {2: 1, 3: 129, 4: 3}
O3 {3: 23, 4: 2}
P {2: 1, 3: 4, 4: 48}
S {3: 12}
T {2: 2, 3: 25, 4: 70, 5: 2}
V {3: 47}
Y {3: 12, 4: 1}
con-ikot-ikot {4: 30}
conkunitzin {1: 2, 2: 12, 3: 39, 4: 9}
conodipine {2: 32, 3: 1}
conohyal {5: 1}
conophysin {3: 20}
conoporin {4: 36, 5: 1}

creates: 

1. num_exons_per_family -- number of transcripts pertaining to a particular exon configuration -- formatted so that it matches the spacing of regions_distribution.stats
2. majority_num_exons.reference -- majority consensus number of exons -- used as a reference to be able to look at venom gene diversity between species and how different 'functional' parts of the venom genes change over time

##########################################

python generate_exon_stats.py

averages the percentage of each region on each exon. only does this for exons for which 80% of the sequence had a hit in the exon capture dataset

creates:

1. region_distribution.stats
2. region.distribution.forscripting.stats - easy file to parse where the different regions are for every exon


requires:

1. all_stats_venombed_annotated_v3
2. all_extractedseq_renamed.fa
3. conotoxins_functional_regions.bed

prints:

#number of sequences for each 'region'

1193 # number of sequences where you sequenced > 80%
1193 # number of sequences for this analysis

-- also creates:
my.mature.exons.info

location of mature exons so you can parse other files for just the mature region


####################

python count_length_exons.py

creates:

1. exon_length.stats

sorted by gene family and pieces, avg length of exon and min max exon length






